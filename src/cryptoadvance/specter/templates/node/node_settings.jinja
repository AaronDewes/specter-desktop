{% extends "base.jinja" %}

{% block main %}
	{% include "includes/qr-scanner.html" %}
	{% include "includes/text-explainer.html" %}

	{% if node_alias %}
		<h1 id="title">{{ node.name }}</h1>
		{% from 'components/editable_title.jinja' import editable_title %}
		{{ editable_title(node.name) }}
	{% else %}
		<h1 id="title">{{ _("Configure your node") }}</h1>
	{% endif %}

	<form action="?" method="POST">
		{% if not node_alias %}
			<section>
				<h3>{{ _("Name your node") }} </h3>
				<div class="floating-wrapper">
					<input class="floating-input peer" placeholder=" " type="text" id="name" name="name" value="{{ node.name }}">
					<label class="floating-label" for="name">{{ _("Name") }}</label>
				</div>
			</section>
		{% endif %}

		<input type="hidden" class="csrf-token" name="csrf_token" value="{{ csrf_token() }}"/>

		<div class="card">
			<section>
				<h3>{{ _("Bitcoin Core Path") }} </h3>

				<div id="datadir-container" class="floating-wrapper">
					<input class="floating-input peer" placeholder=" " type="text" id="datadir" name="datadir" type="text" value="{{ node.default_datadir }}">
					<label class="floating-label" for="datadir">{{ _("Bitcoin Core Directory Path") }}</label>
				</div>

				<div class="floating-wrapper flex items-center mt-3">
					<input type="checkbox" id="autodetect" name="autodetect" {% if node.autodetect %}checked{% endif %}>
					<label for="autodetect">Auto-detect Bitcoin Core</label>
				</div>
			</section>

			<section>
				<div id="rpc_settings">
					<div class="flex justify-between items-center">
						<h3>{{ _("JSON-RPC Configuration") }} </h3>
						<qr-scanner id="scan_rpc" class="mb-2 rounded-lg hover:bg-dark-700 pl-1 pr-3">
							<a slot="button" href="#" class="flex items-center">
								<img class="w-7 h-7" src="{{ url_for('static', filename='img/qr-code.svg') }}">
								{{ _("Connect with QR") }}
							</a>
						</qr-scanner>
					</div>

					<div class="space-y-3">
						<div class="floating-wrapper">
							<input class="floating-input peer" placeholder=" " type="text" id="username" name="username" value="{{ node.user }}">
							<label class="floating-label" for="username">Username</label>
						</div>

						<div class="floating-wrapper">
							<input class="floating-input peer" placeholder=" " type="password" id="password" name="password" value="{{ node.password }}">
							<label class="floating-label" for="password">Password</label>
						</div>

						<div class="grid grid-cols-2 gap-3 mb-3">
							<div class="floating-wrapper">
								<input class="floating-input peer" placeholder=" " type="text" id="host" name="host" type="text" value="{{ node.protocol }}://{{ node.host }}">
								<label class="floating-label" for="host">Host</label>
							</div>
							<div class="floating-wrapper">
								<input class="floating-input peer" placeholder=" " type="text" id="port" name="port" type="text" value="{{ node.port }}">
								<label class="floating-label" for="port">Port</label>
								<tool-tip class="floating-info">
									<span slot="paragraph">
										{{ _("Mainnet: ")}}<b>8332</b>,
										{{ _("Testnet: ")}}<b>18332</b>,
										{{ _("Regtest: ")}}<b>18443</b>,
										{{ _("Signet:  ")}}<b>38332</b>,
										<br>
										{{ _("Liquid Mainnet: ")}}<b>7041</b>,
										{{ _("Liquid Testnet: ")}}<b>18891</b>,
										{{ _("Liquid Regtest: ") }}<b>18884</b>
									</span>
								</tool-tip>
							</div>
						</div>

						<div class="mt-3">
							<text-explainer>
								<span slot="title" class="cursor-pointer">{{ _("Need help with the setup?") }} </span>
								<div slot="content" class="mb-8">
									<h3 class="mt-3">Bitcoin</h3>
									<p>
										{{ _("When auto-detect is on, Specter will check for environment variables (BTC_RPC_USER, BTC_RPC_PASSWORD, BTC_RPC_HOST, BTC_RPC_PORT) to configure the connection or attempt to locate your Bitcoin data directory and load your node configurations from it.") }}
										{{ _('If your Bitcoin Core data directory is not located at the default location, you will need to enter its path under "Bitcoin Core data directory path" to locate it.') }}
										{{ _("If you are connecting to a remote node, you need to disable auto-detect and enter the node's configurations manually below.") }}
									</p>

									<h3 class="mt-3">Liquid</h3>
									<p>{{ _("When auto-detect is on, Specter will here only check for environment variables (ELM_RPC_USER, ELM_RPC_PASSWORD, ELM_RPC_HOST, ELM_RPC_PORT).") }}</p>
								</div>
							</text-explainer>
						</div>
					</div>
				</div>
			</section>

			<div class="flex space-x-3 mt-8">
				{% if specter.node_manager.nodes | length > 1 and node_alias %}
					<button type="submit" name="action" value="forget" class="button">{{ _("Forget node") }}</button>
				{% endif %}
				<button type="submit" class="button" name="action" value="test">{{ _("Test") }}</button>
				<button type="submit" class="button grow bg-accent text-white" name="action" value="save">{{ _("Save") }}</button>
			</div>

			{% if test %}
				<br><div class="log"><b>{{ _("Test results:") }}</b><br><br>
				<div data-style="display: grid;grid-template-columns: auto auto auto; line-height: 2.2;">
					{% macro tick_or_cross(my_boolean) %}
					<button data-style="background: #fff; border: none;" disabled> 
						{% if my_boolean %}
							<div data-style="color: green; font-size: 1.5em;">&#x2714;</div> 
						{% else %} 
							<div data-style="color: red; font-size: 1.5em;">&#x274C;</div>  
						{% endif %}
					</button>
					{% endmacro %}
					{% if 'connectable' in test['tests'] %}
						<div data-style="margin-right: 10px;">{{ _("Connectable") }}</div>
						<div>{{ tick_or_cross(test['tests']['connectable']) }} </div>
						{% if not test['tests']['connectable'] %} 
							<span class="warning">
								{{ _("There are a lot of potential issues preventing the connection. Please double-check the host and the port. Make sure you can reach the host and make sure that Bitcoin Core is listening on the port you have specified.") }} 
								{{ _('For more hints, please look at this') }} <a data-style="color:grey" href="https://github.com/cryptoadvance/specter-desktop/blob/master/docs/connect-your-node.md" target="_blank">{{ _('article.') }}</a>
							</span>
						{% else %}
							<div></div>
						{% endif %}
					{% endif %}

					{% if 'credentials' in test['tests'] %}
						<div data-style="margin-right: 10px;">Credentials</div>
						<div> {{ tick_or_cross(test['tests']['credentials']) }} </div>
						{% if not test['tests']['credentials'] %}
							<span class="warning">
								{{ _("Please double-check the user and the password. Have a look at the bitcoin.conf for the correct values in that field.") }}
								{{ _('For more hints, please read this') }} <a data-style="color:grey" href="https://github.com/cryptoadvance/specter-desktop/blob/master/docs/connect-your-node.md" target="_blank">{{ _('article.') }}</a>
							</span>
						{% else %}
							<div></div>
						{% endif %}
					{% endif %}

					{% if 'recent_version' in test['tests'] %}
						<div data-style="margin-right: 10px;">{{ _("Version recent enough") }}</div>
						<div> {{ tick_or_cross(test['tests']['recent_version']) }} </div>
						{% if not test['tests']['recent_version'] %}
							<span class="warning">
								{{ _("Your Core Node might be too old.") }}
								{{ _("Specter is working well up from Bitcoin Core version 0.17. The version of your node is too old, unfortunatley. Please upgrade!") }}
							</span>
						{% else %}
							<div></div>
						{% endif %}
					{% endif %}
					
					{% if 'wallets' in test['tests'] %}
						<div data-style="margin-right: 10px;">Wallets enabled</div>
						<div> {{ tick_or_cross(test['tests']['wallets']) }} </div>
						{% if not test['tests']['wallets'] %}
							<span class="warning">
								{{ _("You don't have wallet support enabled on your Core node.") }}
								{{ _("The RPC interface of your Core node is available, but the Core wallet API is not. Please make sure to have 'disablewallet=0' in your bitcoin.conf.") }}
							</span>
						{% else %}
							<div></div>
						{% endif %}
					{% endif %}

				</div>

				<br>
					<code>
						<pre>{{ _("Process finished with code ") }}<b>{{ test.code }}</b>{% if test.code == 0 %} {{ _("Output:") }} {{ test.out }}{% else %}{{ _("Error message:") }} {{ test.err }}{% endif %}</pre>
					</code>
				</div>
			{% endif %}
		</div>
	</form>
{% endblock %}

{% block scripts %}
<script>
	document.addEventListener("DOMContentLoaded", function(){
		var autodetect = document.getElementById("autodetect");

		if (autodetect != null) {
			function toggleAutoDetectMode() {
				var rpcSettings = document.getElementById("rpc_settings");
				var scanRpc = document.getElementById("scan_rpc");
				var datadirContainer = document.getElementById("datadir-container");

				if (autodetect.checked) {
					datadirContainer.style.removeProperty('pointer-events');
					datadirContainer.style.removeProperty('opacity');

					rpcSettings.style['pointer-events'] = 'none';
					rpcSettings.style['opacity'] = '0.4';

					document.getElementById("username").value = '{{ node.user }}';
					document.getElementById("password").value = '{{ node.password }}';
				} else {
					datadirContainer.style['pointer-events'] = 'none';
					datadirContainer.style['opacity'] = '0.4';

					rpcSettings.style.removeProperty('pointer-events');
					rpcSettings.style.removeProperty('opacity');
				}

			}

			autodetect.addEventListener("change", function() {
				toggleAutoDetectMode();
			}, false);
			toggleAutoDetectMode();
		}
	});

</script>

<script type="text/javascript">
	let scanner = document.getElementById('scan_rpc');
	if(scanner != null) {
		scanner.addEventListener('scan', e=>{
			let result = e.detail.result;
			if(result==null){
				return;
			}
			try {
				let data = result.split('btcrpc://')[1].split(':')
				let username = data[0];
				let password = data[1].split('@')[0];
				let host = data[1].split('@')[1];
				let port = data[2].split('?')[0].split('/')[0];
				document.getElementById('username').value = username;
				document.getElementById('password').value = password;
				document.getElementById('host').value = host;
				document.getElementById('port').value = port;
			} catch {
				showError(`{{ _("Failed to read connection data from the QR") }}`, 3000)
			}
		});
	}
</script>
{% endblock %}
